---
title: "Identify the distribution for each model"
author: "Morgan Gray"
format: 
  html:
    toc: true
    toc-title: Contents
    number-sections: TRUE
editor: visual
execute:
  echo: false
  warning: false
---

```{r setup}
# Load libraries, functions, workflows -----
rm(list = ls())
#
library(tidyverse) ## To manipulate data frames
library(here) ## To manage directories
library(vcd)
library(pscl)
library(MASS)
library(car)
library(fitdistrplus)
library(tidyr) # For pivot_longer
library(gridExtra)
library(kableExtra)
#
source(here("R/functions/fxn_utilities.R"))
# Read the richness and abundance data tables
source(here("R/functions/fxn_load_rich_abun.R"))

# fig : Simple theme for ggplot figures  ----
fig <-
  theme_bw() +
  theme(
    panel.grid.minor = element_blank(),
    panel.grid.major = element_blank(), panel.background = element_blank(),
    strip.background = element_blank(), strip.text.y = element_text(),
    legend.background = element_blank(), legend.key = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA)
  )
#   fxn_kable: Format table for markdown ----
fxn_kable <- function(df){
  
  df  %>%
    knitr::kable() %>%
    kableExtra::kable_styling(
      bootstrap_options = c("striped", "hover", "condensed"), 
                  full_width = TRUE,  
                  position = "left", 
                  fixed_thead = TRUE)
}

```

```{r functions}
# Function to perform distribution checks for count data (Richness)
check_count_distribution <- function(data, data_name) {
  message(paste("Checking distribution for:", data_name))

  # Basic histogram
  hist(data$value, breaks = 15, col = "gray", main = paste("Histogram of", data_name), xlab = "Value", ylab = "Count")

  # Goodness-of-fit tests
  gf_pois <- goodfit(data$value, type = "poisson")
  print(paste("Poisson Goodness of Fit for", data_name))
  print(summary(gf_pois))
  plot(gf_pois, main = paste("Poisson Goodness of Fit Plot for", data_name))

  gf_nbin <- goodfit(data$value, type = "nbinomial")
  print(paste("Negative Binomial Goodness of Fit for", data_name))
  print(summary(gf_nbin))
  plot(gf_nbin, main = paste("Negative Binomial Goodness of Fit Plot for", data_name))

  # Vuong tests (if applicable and if models converge)
  if (length(unique(data$treatment)) > 1) {
    tryCatch({ # Wrap in tryCatch to handle potential errors
      nb <- glm.nb(value ~ treatment, data = data)
      p <- glm(value ~ treatment, data = data, family = "poisson")
      print(paste("Vuong test: Negative Binomial vs. Poisson for", data_name))
      print(vuong(nb, p))

      if (min(data$value) == 0) {
        z <- zeroinfl(value ~ treatment, data = data)
        print(paste("Vuong test: Poisson vs. Zero-Inflated for", data_name))
        print(vuong(p, z))
        print(paste("Vuong test: Negative Binomial vs. Zero-Inflated for", data_name))
        print(vuong(nb, z))
      }
    }, error = function(e) {
      message(paste("Error in Vuong tests for", data_name, ":", e$message))
    })
  } else {
    message("Skipping Vuong tests as no treatment variable is present.")
  }

  # Q-Q plots - Use mle2 for more robust Negative Binomial fitting
  data$value_1 <- data$value + 1 # Shifting values for better visualization
    tryCatch({
      nbinom_mle <- mle2(value_1 ~ dnegbin(mu = mu, theta = theta), start = list(mu = mean(data$value_1), theta = 1), data = data)
      qqp(data$value_1, "nbinom", size = coef(nbinom_mle)["theta"], mu = coef(nbinom_mle)["mu"], main = paste("Negative Binomial Q-Q Plot for", data_name))
    }, error = function(e) {
      message(paste("Error fitting Negative Binomial with mle2 for", data_name, ":", e$message))
    })

  qqp(data$value_1, "norm", main = paste("Normal Q-Q Plot for", data_name))
  qqp(data$value_1, "lnorm", main = paste("Lognormal Q-Q Plot for", data_name))

  poisson <- fitdistr(data$value_1, "Poisson")
  qqp(data$value_1, "pois", lambda = poisson$estimate, main = paste("Poisson Q-Q Plot for", data_name))

  gamma <- fitdistr(data$value_1, "gamma")
  qqp(data$value_1, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]], main = paste("Gamma Q-Q Plot for", data_name))

  invisible(data)
}

# Function to perform distribution checks for continuous data (Abundance)
check_continuous_distribution <- function(data, data_name) {
  message(paste("Checking distribution for:", data_name))

  # Histograms
  hist(data$value, breaks = 25, col = "gray", main = paste("Histogram of", data_name), xlab = "Value", ylab = "Count")
  hist(data$value_std, breaks = 25, col = "gray", main = paste("Histogram of Standardized", data_name), xlab = "Standardized Value", ylab = "Count")
  hist(data$value_log, breaks = 25, col = "gray", main = paste("Histogram of Log-transformed", data_name), xlab = "Log Value", ylab = "Count")
  hist(data$value_sqrt, breaks = 25, col = "gray", main = paste("Histogram of Square Root-transformed", data_name), xlab = "Sqrt Value", ylab = "Count")

  # Q-Q Plots
  qqp(data$value_std, "norm", main = paste("Normal Q-Q Plot of Standardized", data_name))
  qqp(data$value_sqrt, "norm", main = paste("Normal Q-Q Plot of Square Root-transformed", data_name))
  qqp(data$value_log, "norm", main = paste("Normal Q-Q Plot of Log-transformed", data_name))

  # fitdistrplus - Corrected plotting

  print(paste("Normal Distribution Fit for", data_name)) 
  fit_norm <- fitdist(data$value, dist = "norm")
  print(plot(fit_norm, histo = FALSE, demp = TRUE))

  print(paste("Normal Distribution Fit for Log-transformed", data_name))
  fit_lognorm <- fitdist(data$value_log, dist = "norm")
  plot(fit_lognorm, histo = FALSE, demp = TRUE)
  
  print(paste("Normal Distribution Fit for Square Root-transformed", data_name)) 
  fit_sqrtnorm <- fitdist(data$value_sqrt, dist = "norm")
  plot(fit_sqrtnorm, histo = FALSE, demp = TRUE)

  print(paste("Logistic Distribution Fit for", data_name))
  fit_logis <- fitdist(data$value, dist = "logis")
  plot(fit_logis, histo = FALSE, demp = TRUE)

  print(paste("Logistic Distribution Fit for Log-transformed", data_name))
  fit_loglogis <- fitdist(data$value_log, dist = "logis")
  plot(fit_loglogis, histo = FALSE, demp = TRUE)

  print(paste("Logistic Distribution Fit for Square Root-transformed", data_name))
  fit_sqrtlogis <- fitdist(data$value_sqrt, dist = "logis")
  plot(fit_sqrtlogis, histo = FALSE, demp = TRUE)
  
  invisible(data)
}

```

# Objectives

To determine the most suitable probability distribution for each of the six models. There were two data types: count data (species richness) and continuous data (abundance; i.e., percent cover). For each data type, a model was fit for each of three subsets: native plant species, native forb species (a subset of native plants), and non-native species.

# Methods

To determine the most suitable probability distribution for count data and continuous data , I conducted a comprehensive analysis that involved a combination of visual inspection (histograms, Q-Q plots), statistical tests (goodness-of-fit tests, Vuong tests), and model comparisons. Together, they allowed me to evaluate different probability distributions and identify the best fit for the data.

I assessed data transformations. In addition to raw values, also performed tests with standardized, square root-transformed, and log-transformed values. For distributions requiring strictly positive values, I added a constant of 1 to all values.

A custom function for was developed for each data type (i.e., count and continuous) to streamline this process. The functions generated visualizations, conducted statistical tests, and handled potential errors during model fitting.

Evaluation of both data types included visual inspection with histograms and Q-Q plots, and distribution fitting. The assessment for count data also included statistical tests for goodness-of-fit and Vuong test. The details about each assessment component are described below.

This systematic approach provided multiple lines of evidence for selecting the most appropriate statistical distribution for modeling species richness in subsequent analyses.

**Histograms**

The analysis for each data type began with visual inspection of the raw data values through histograms, which revealed key distributional features such as central tendency, spread, symmetry, and potential outliers.

The shape of the histogram provided initial insight into whether the data followed common distributions like Poisson (right-skewed with a single peak) or negative binomial (right-skewed with a longer tail).

For continuous data, I created plots showing the distribution of raw and transformed values. In addition to the histogram for raw values, I also created histograms for standardized, log-transformed, and square root-transformed values.

**Goodness-of-Fit Tests**

For count data, I then performed goodness-of-fit tests to formally evaluate whether the data followed Poisson or negative binomial distributions. These tests produced p-values that indicated the strength of evidence against each distribution, with p \> 0.05 suggesting acceptable fit and p \< 0.05 indicating poor fit:

-   p \> 0.05: The data was consistent with the distribution (fail to reject the null hypothesis).

-   p \< 0.05: The data significantly deviated from the distribution (reject the null hypothesis).

For example, if testing a Poisson distribution and we get p \> 0.05, we can work with the data as if it follows a Poisson distribution. On the other hand, a p-value less than 0.05 suggests the data significantly deviates from the tested distribution and we should consider alternatives.

**Vuong Tests**

For count data, I used Vuong tests to directly compare the fit of competing models. The Vuong test helps us directly compare two competing models to see which better fits our data. It produces a z-statistic and associated p-value, where the sign of the z-statistic (when significant at p \< 0.05) indicates which model provides better fit:

-   Positive z-statistics with p \< 0.05 indicate first model is better

-   Negative z-statistics with p \< 0.05 indicate second model is better

-   p \> 0.05 indicates models are statistically indistinguishable

For example, a Vuong test comparing a negative binomial model to a Poisson model with a z-statistic of 2.5 and p = 0.01 would indicate that the negative binomial model provides a significantly better fit.

**Quantile-Quantile (Q-Q) Plots**

To further assess distributional fit, I generated quantile-quantile (Q-Q) plots comparing the observed data against theoretical distributions. Although not a discrete test statistic (like the outcome of a goodness of fit or Vuong test), this visualization can support those test results or provide insight when data fails to fit common distribution.

In these plots, we're comparing our observed data against what we would expect if it perfectly followed a theoretical distribution. The interpretation centers on how closely the points follow the diagonal reference line. Points falling along the diagonal reference line indicate good agreement between observed and theoretical distributions.

More realistically, we look for patterns in how points deviate from this line. Small random deviations around the line are acceptable, but systematic patterns raise concerns. Systematic deviations can reveal the specific ways in which the data departed from theoretical expectations.

In ecological count data, deviations are often observed at the extremes, particularly due to rare species (excess zeros) or highly abundant counts. These patterns can aid in model selection. For example, consistent deviations at low values might suggest the need for a zero-inflated model, while heavy tails might favor a negative binomial over a Poisson distribution.

For count data, I reviewed the Q-Q plots for Poisson and negative binomial. When the goodness-of-fit and/or Vuong tests were inconclusive (i.e., for non-native count values), I evaluated the shape of the initial histograms to identify potential alternate distributions (e.g., normal, log-normal, and gamma distributions). I then evaluated Q-Q plots for alternate distributions.

For continuous data, Distribution fitting was performed using multiple transformations and distributions. Normal and logistic distributions fit to standardized, square-root transformed, and log-transformed values.

# Results

# Richness

Print the first 10 rows of the data table for richness (rich).

::: callout-tip
Scroll to the right to see more columns.
:::

```{r richness}
rich %>%
  slice(1:10) %>%
  fxn_kable()
```

## Methods

**Histograms**

The analysis began with visual inspection of the data through histograms, which revealed key distributional features such as central tendency, spread, symmetry, and potential outliers. For count data, the shape of the histogram provided initial insight into whether the data followed common distributions like Poisson (right-skewed with a single peak) or negative binomial (right-skewed with a longer tail).

**Goodness-of-Fit Tests**

I then performed goodness-of-fit tests to formally evaluate whether the data followed Poisson or negative binomial distributions. These tests produced p-values that indicated the strength of evidence against each distribution, with p \> 0.05 suggesting acceptable fit and p \< 0.05 indicating poor fit:

-   p \> 0.05: The data was consistent with the distribution (fail to reject the null hypothesis).

-   p \< 0.05: The data significantly deviated from the distribution (reject the null hypothesis).

For example, if testing a Poisson distribution and we get p \> 0.05, we can work with the data as if it follows a Poisson distribution. On the other hand, a p-value less than 0.05 suggests the data significantly deviates from the tested distribution and we should consider alternatives.

**Vuong Tests**

I used Vuong tests to directly compare the fit of competing models. The Vuong test helps us directly compare two competing models to see which better fits our data. It produces a z-statistic and associated p-value, where the sign of the z-statistic (when significant at p \< 0.05) indicates which model provides better fit:

-   Positive z-statistics with p \< 0.05 indicate first model is better

-   Negative z-statistics with p \< 0.05 indicate second model is better

-   p \> 0.05 indicates models are statistically indistinguishable

For example, a Vuong test comparing a negative binomial model to a Poisson model with a z-statistic of 2.5 and p = 0.01 would indicate that the negative binomial model provides a significantly better fit.

**Quantile-Quantile (Q-Q) Plots**

To further assess distributional fit, I generated quantile-quantile (Q-Q) plots comparing the observed data against the following distributions:

-   Normal distribution

-   Lognormal distribution

-   Poisson distribution

-   Negative Binomial distribution (using robust maximum likelihood estimation)

-   Gamma distribution

In these plots, we're comparing our observed data against what we would expect if it perfectly followed a theoretical distribution. The interpretation centers on how closely the points follow the diagonal reference line. Points falling along the diagonal reference line indicate good agreement between observed and theoretical distributions.

More realistically, we look for patterns in how points deviate from this line. Small random deviations around the line are acceptable, but systematic patterns raise concerns. Systematic deviations can reveal the specific ways in which the data departed from theoretical expectations.

In ecological count data, deviations are often observed at the extremes, particularly due to rare species (excess zeros) or highly abundant counts. These patterns can aid in model selection. For example, consistent deviations at low values might suggest the need for a zero-inflated model, while heavy tails might favor a negative binomial over a Poisson distribution.

## Native species

**Recommended distribution:** Negative binomial distribution

**Statistical summary**

Goodness of fit test:

-   Poisson distribution: poor

-   Negative binomial distribution: ok

The Vuong test(s):

-   Negative binomial vs. Poisson: Negative binomial better

-   Poisson vs. zero-inflated: No difference

-   Negative binomial vs. zero-inflated: Negative binomial better

Q-Q plot results:

-   Normal: Points showed zero inflation

-   Lognormal: Very poor

-   Poisson: Points outside bounds halfway through

-   Negative binomial: Decent until upper values

-   Gamma: Spread beyond bounds at all values, falls off at upper values

<br>

**Statistical tests and visualization results**

```{r }
check_count_distribution(rich_nat, "native richness")
```

## Native forb species

**Recommended distribution:** Negative binomial distribution

**Statistical summary**

Goodness of fit test:

-   Poisson distribution: poor

-   Negative binomial distribution: ok

The Vuong test(s):

-   Negative binomial vs. Poisson: Negative binomial better

-   Poisson vs. zero-inflated: No difference

-   Negative binomial vs. zero-inflated: Negative binomial better

Q-Q plot results:

-   Normal: Shows zero inflation

-   Lognormal: Very poor

-   Poisson: Points fall below bounds halfway through

-   Gamma: Points spread beyond bounds overall; falls off at upper values

<br>

**Statistical tests and visualization results**

```{r }
check_count_distribution(rich_frb, "native forb richness")
```

## Non-native species

**Recommended distribution:** Normal distribution with log-transformed values

**Statistical summary**

Goodness of fit test:

-   Poisson distribution: ok

-   Negative binomial distribution: poor

The Vuong test(s):

-   Negative binomial vs. Poisson: Poisson

Q-Q plot results:

-   Normal: Points above bounds for upper values

-   Lognormal: Very poor

-   Poisson: Points below bounds across most of the distribution; very high values above bounds

-   Gamma: Points spread beyond bounds overall; below bounds at low values, above bounds at high values

<br>

**Statistical tests and visualization results**

```{r }
check_count_distribution(rich_non, "nonnative richness")
```

------------------------------------------------------------------------

# Abundance

Print the first 10 rows of the data table for abundance (abun).

::: callout-tip
Scroll to the right to see more columns.
:::

```{r abundance}
abun %>%
  slice(1:10) %>%
  fxn_kable()
```

## Native species

**Recommended distribution:** Normal distribution with log-transformed values

**Statistical summary**

Histogram:

-   Raw values: Skewed left, long tail to right

-   Standardized values: Skewed left between -1 to 0, long tail to right

-   Log-transformed values: Normal distribution with outlier to far left (negative)

-   Square root-transformed values: Main peat at 3, secondary peak(s) between 7-10

Q-Q plot results:

-   Standardized values: Not good

-   Square root-transformed values: Kindof along line except for low values

-   Log-transformed values: Hard to tell because skewed by two outliers

Distribution fitting:

-   Normal distribution fit to raw values:

-   Normal distribution fit to log-transformed data

-   Normal distribution fit to square root-transformed data

-   Logistic distribution fit to raw values:

-   Logistic distribution fit to log-transformed data

-   Logistic distribution fit to square root-transformed data

<br>

**Statistical tests and visualizations**

```{r }
check_continuous_distribution(abun_nat, "native abundance")
```

## Native forb species

**Recommended distribution:** Normal distribution with log-transformed values

**Statistical summary**

Histogram:

-   Raw values:

-   Standardized values:

-   Log-transformed values:

-   Square root-transformed values:

Q-Q plot results:

-   Standardized values:

-   Square root-transformed values:

-   Log-transformed values:

Distribution fitting:

-   Normal distribution fit to raw values:

-   Normal distribution fit to log-transformed data

-   Normal distribution fit to square root-transformed data

-   Logistic distribution fit to raw values:

-   Logistic distribution fit to log-transformed data

-   Logistic distribution fit to square root-transformed data

<br>

**Statistical tests and visualizations**

```{r }
check_continuous_distribution(abun_frb, "native forb abundance")
```

## Non-native species

**Recommended distribution:** Normal distribution with square root-transformed values

**Statistical summary**

Histogram:

-   Raw values:

-   Standardized values:

-   Log-transformed values:

-   Square root-transformed values:

Q-Q plot results:

-   Standardized values:

-   Square root-transformed values:

-   Log-transformed values:

Distribution fitting:

-   Normal distribution fit to raw values:

-   Normal distribution fit to log-transformed data

-   Normal distribution fit to square root-transformed data

-   Logistic distribution fit to raw values:

-   Logistic distribution fit to log-transformed data

-   Logistic distribution fit to square root-transformed data

<br>

**Statistical tests and visualizations**

```{r }
check_continuous_distribution(abun_non, "nonnative abundance")
```
